VSCODE auto-indent:  Alt+Shift+F
Brackets auto-indent: Ctrl+Alt+I

https://www.reddit.com/r/vscode/comments/6c1uk8/how_do_you_auto_indent_your_code/
This drove me nuts too. I ended up using the Beautify plugin by Hooky QR and set it to format the file on save.
https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify



VSCODE Command Palette (to find commands):
Menu: VS Code / View / Command Palette...
Keyboard: CMD / CTRL + SHIFT + P
https://stackoverflow.com/a/58126404



VSCODE Live Preview (html+javascript) and debugging:  Debugger for Chrome
https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome



If global variable is not working within a function, 
it's because you're redeclaring a variable inside a function with  var variable = value;
instead of just  variable = value;
(only do  var variable  once in your code).

// old, no:
because you're modifying the variable within the function, which creates a duplicate variable, overwriting the global variable.
I can't find a way to access and modify the global variable within a function (this.variable doesn't work, redefining at the top doesn't work).
You just have to use a different variable (don't declare with var or modify the global one within a function), or you have to initialize it to the value you want within the function instead of outside it.
--
Oh maybe it's not working correctly because I defined it in a function upon submit?:
document.getElementById("finalSubmitButton").addEventListener("click", function () {



If it's not working and not giving you an error, turn on breakpoints on the bottom left after running, and enable caught and uncaught exceptions.





GITHUB
Github commits
jzsenthy
73659347+jzsenthy @users.noreply.github.com__________

GITHUB
Undo github commit
https://stackoverflow.com/a/6866485/1263035
Open Git Bash
cd "c:\projectfolder"
git reset HEAD~1


GITHUB
If the commit was already 'pushed', do this instead: 
git revert <bad-commit-sha1-id> git push origin


GITHUB
What you want is to either do a git commit --amend to modify your old commit if you've not already created a fresh commit with your changes.  (didn't work)

If you've already created a fresh commit, you'll want to use git rebase -i to squash your commit on top of the old one.  (didn't work)

After you've made this change locally, and verified your commit looks the way you want it to, you'll have to git push --force to overwrite history on the Github remote.  (didn't work)
https://stackoverflow.com/a/35543613/1263035






VSCODE  (didn't help with breakpoints becoming unbound though)
https://medium.com/young-coder/setting-up-javascript-debugging-in-visual-studio-code-6c5005529987
One final trick for debugging inline JavaScript
The debugging approach you just learned works on any JavaScript file. But if you have a block of JavaScript code inside an HTML file, you’re more limited. Ordinarily, Visual Studio won’t let you set any breakpoints in HTML files. It’s picky that way.
If you run into this problem, there’s a simple workaround:
Choose File→Preferences→Settings.
Type “breakpoints” into the search box.
Switch on the “Allow setting breakpoints in any file” setting.



VSCODE  (breakpoints becoming unbound when trying to run and debug)
I installed the chrome debugger first, which works to preview your files, but marked breakpoints become unbound when you click Run & Debug:
https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome
(there's troubleshooting tips on this page we could look at)

Install the live server instead:
https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer

Settings are defined here: (like which browser to launch etc)
\.vscode\launch.json
\.vscode\settings.json












--------------------


COMMENTS FORMATTING: 

HTML:
<!--  -->

CSS:
/*  */

Javascript:
Single line comments:
//
Multi-line comments start with /* and end with */
/*  */





// Add this line to add a breakpoint:
debugger




How do I put variables (values) inside javascript strings?
https://stackoverflow.com/questions/7790811/how-do-i-put-variables-inside-javascript-strings
Just use backticks for templating
https://stackoverflow.com/a/37245773/294884

let a = `hello ${name}`    // NOTE!!!!!!!! ` not ' or "

Note that it is a backtick, not a quote.









Use a variable value as part of a variable name:
I have an object with a long list of items and their weights, and I want to retrieve the value dynamically depending on which one is chosen, 

<!-- Form dropdown selector -->
<select class="form-select" id="selectAlternateOption">
    <option selected></option>
    <option value="1">B1</option>
    <option value="2">B2</option>
    <option value="3">B3</option>
</select>

// Retrieve value of dropdown
var valueAlternateOptionSelect = document.getElementById("selectAlternateOption").value;

// List of item weights
var itemWeight = {
    ...
    alternateOptionB1: 5,
    alternateOptionB2: 7,
    alternateOptionB3: 15,
	accessoryA: 3,
	accessoryBox: 1,
	...
};


So i want to retrieve itemWeight.alternateOptionB# dynamically like:
var weightCurrentBox = ["itemWeight.alternateOptionB" + `valueAlternateOptionSelect`];

This is the solution I found:

var weightCurrentBox = Function('return itemWeight.alternateOption' + valueAlternateOptionSelect)();









If you get a  "Declaration or statement expected"  error on an  else if  statement, it's because you made a statement above it,
in between the  if  and  else if. You can't do things in between if and else. (throw your variable declarations etc above them).
(window.alerts won't work in between if/else statements either).



innerHTML and newlines  (\n and <pre> vs <br>)
https://www.reddit.com/r/javascript/comments/22ralo/innerhtml_and_newlines/




EVAL ALTERNATIVE (referencing variable value in a variable)
// Not calling a function, just referencing a variable dynamically (packingItemWeight.lds[valueLdsMinusPeriod] aka packingItemWeight.lds200)
// REFERENCE:  (variable as part of a variable, within global window.Function())  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!
// Alternative:  https://stackoverflow.com/a/52246274/1263035  // window[dynamicname + '2'] = 'myvalue'
weightCurrentBox += Function('return packingItemWeight.lds' + valueLdsMinusPeriod)();

EXAMPLE:
function putInBox(valueCurrentItem, spaceSingleCurrentItem, spaceSingleCurrentItemVariableName, totalValueCurrentItem, currentItemName) {
// Change the variable name from retrieving item space to weight
var weightSingleCurrentItemVariableName = spaceSingleCurrentItemVariableName.replace('packingItem', 'packingItemWeight');
//// Replacement code for eval(), to resolve variable name to a variable. (or to use variable values in variable name). made by me
// I think this was needed because the single item variable name changes every time this function is called (built/modified above)
// REFERENCE:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!
weightSingleCurrentItem = Function('return ' + weightSingleCurrentItemVariableName)();







// Change checkboxes from On/NaN to 1 or 0
// SOURCE:  https://stackoverflow.com/questions/18295811/checkbox-value-0-or-1
// SOURCE:  https://stackoverflow.com/a/63962842
 document.addEventListener('DOMContentLoaded', e => {
    for (let checkbox of document.querySelectorAll('input[type=checkbox]')) {
        checkbox.value = checkbox.checked ? 1 : 0;
        checkbox.addEventListener('change', e => {
            e.target.value = e.target.checked ? 1 : 0;
        });
    }
});




<!-- BEHAVIOR:  onsubmit="return false"  was added to prevent the page refresh on submit, so I can show the results -->
<!-- REFERENCE:  https://stackoverflow.com/a/57226770 -->
<form onsubmit="return false">





HIDE ELEMENT DURING PRINT:
<!-- TIP:  Boostrap class  .d-print-none  hides this during printing-->
<!-- REFERENCE:  https://stackoverflow.com/a/36352263 -->
<!-- REFERENCE:  https://getbootstrap.com/docs/5.0/utilities/display/#display-in-print -->
<div class="row d-print-none">

Native CSS:

@media print {
  .hidden-class-for-print {
    display: none !important;
  }
}





Troubleshooting:
If you lost the margin/padding on your stuff, you probably have one extra </div> closing tag somewhere (mine was in new code at the top).


My variables were showing up as undefined because i was using  var  everytime i modified a variable, like  var variable = variable + variable2;  even after it was declared. var  should only be used the first time the variable is declared, then after that just start with the variable name, like  variable = variable + variable2;



Javascript alert box truncated after 24 lines (or some amount of characters)





getElementById
document.getElementById("exercise").innerHTML = "Hello";



String = 'single' or "double quotes"
	(You can use quotes inside a string, as long as they don't match the quotes surrounding the string.)



Arrays = square bremember my namerackets (zero-based).
	var cars = ["Saab", "Volvo", "BMW"];

	Spaces and line breaks are not important. A declaration can span multiple lines.
	Do not put the comma after the last element in the array.



Objects are written with curly braces {}.
	var person = {  firstName : "John",  lastName  : "Doe",
	  age     : 50,
	  eyeColor  : "blue"
	};








Switch statement
https://mdbootstrap.com/education/javascript/chapter-3-lesson-6/

switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}





Loops
https://mdbootstrap.com/education/javascript/chapter-3-lesson-7/
	for - loops through a block of code a number of times
	for/in - loops through the properties of an object
	while - loops through a block of code while a specified condition is true
	do/while - also loops through a block of code while a specified condition is true








typeof operator finds the type of a variable.
alert(typeof x);   // Returns "string"
	(The typeof operator returns object for both objects, arrays, and null.)



Empty Values
var car = "";    // The value is "", the typeof is "string"



Null is "nothing". It is supposed to be something that doesn't exist.
  You can empty an object by setting it to null:
	var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
	person = null;    // Now value is null, but type is still an object





Function example:
<!-- Just an empty paragraph, where the result of the calculation of the following function will appear -->
 <p id="demo"></p>

 <script>
     // This is a function that calculates the multiplication of two variables
     function myFunction(p1, p2) {
         return p1 * p2;
     }

     // After calculation we invoke the function and place its result into a paragraph with id = "demo"
     document.getElementById("demo").innerHTML = myFunction(4, 3);
 </script>




The () Operator Invokes the Function
	myFunction returns the function definition, and myFunction() returns the function result.


	Local variables are created when a function starts, and deleted when the function is completed.


Accessing Object Properties
objectName.propertyName
person.firstName

objectName["propertyName"]
person["firstName"]







Accessing Object Methods

You access an object method with the following syntax:

objectName.methodName()
or
name = person.fullName();












onclick example:
<!-- Button with an ID "button-test" -->
<button id="button-test" type="button">Click me!</button>

<!-- Empty paragraph with an ID "example-1" -->
<p id="example-1"></p>

<script>
    // This instruction says "If you click button with ID 'button-test' run myFunction"
    document.getElementById("button-test").onclick = function () {
        myFunction()
    };

    // This instruction says "Put this text into a paragraph with an ID "example-1"
    function myFunction() {
        document.getElementById("example-1").innerHTML = "WOW, YOU CLICKED ME!";
    }
</script>




EXAMPLE onclick alert:
<button id="button-ex-1" type="button">Click me!</button>

<script>
    document.getElementById("button-ex-1").onclick = function () {
        alert("hello");
    };
</script>




EXAMPLE div element that changes background color when mouse moves over it:
HTML
<div id="example-3">Example div</div>

<script>
    document.getElementById("example-3").onmouseover = function () {
        document.getElementById("example-3").style.backgroundColor = 'red';
    };
</script>




Common HTML Events
Event	Description
onchange	An HTML element has been changed
onclick	The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	The browser has finished loading the page





Search() vs indexof():
https://mdbootstrap.com/education/javascript/chapter-2-lesson-8/

The search() method cannot take a second start position argument.
The indexOf() method cannot take powerful search values (regular expressions).




Extracting String Parts
https://mdbootstrap.com/education/javascript/chapter-2-lesson-8/

slice(start, end)
substring(start, end)
substr(start, length)






Comparison Operators
https://mdbootstrap.com/education/javascript/chapter-3-lesson-3/

Given that x = 5:
Operator	Description			Comparing	Returns
==		equal to			x == 8		false
						x == 5		true
						x == "5"	true
===		equal value and equal type	x === 5		true
						x === "5"	false
!=		not equal			x != 8		true
!==		not equal value or type		x !== 5		false
						x !== "5"	true
						x !== 8		true
>		greater than			x > 8		false
<		less than			x < 8		true
>=		greater than or equal to	x >= 8		false
<=		less than or equal to		x <= 8		true



Logical Operators

Given that x = 6 and y = 3:
Operator	Description	Example
&&		and		(x < 10 && y > 1) is true
||		or		(x == 5 || y == 5) is false
!		not		!(x == y) is true



Comparing Different Types
	When comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false.













BOOTSTRAP MARGIN/PADDING (mb-0 mb-5 mx-3):
https://stackoverflow.com/a/50250902


Bootstrap has a wide range of responsive margin and padding utility classes. They work for all breakpoints:

xs (<=576px), sm (>=576px), md (>=768px), lg (>=992px) or xl (>=1200px))

The classes are used in the format:

{property}{sides}-{size} for xs & {property}{sides}-{breakpoint}-{size} for sm, md, lg, and xl.

m - sets margin

p - sets padding

---

t - sets margin-top or padding-top

b - sets margin-bottom or padding-bottom

l - sets margin-left or padding-left

r - sets margin-right or padding-right

x - sets both padding-left and padding-right or margin-left and margin-right

y - sets both padding-top and padding-bottom or margin-top and margin-bottom

blank - sets a margin or padding on all 4 sides of the element

---

0 - sets margin or padding to 0

1 - sets margin or padding to .25rem (4px if font-size is 16px)

2 - sets margin or padding to .5rem (8px if font-size is 16px)

3 - sets margin or padding to 1rem (16px if font-size is 16px)

4 - sets margin or padding to 1.5rem (24px if font-size is 16px)

5 - sets margin or padding to 3rem (48px if font-size is 16px)

auto - sets margin to auto


See more at Bootstrap 4.5 - Spacing   https://getbootstrap.com/docs/4.5/utilities/spacing/

Read more in w3schools   https://www.w3schools.com/bootstrap4/bootstrap_utilities.asp













-----------------------------------------
alert(person.firstname);

var person = {name:"john",age:50};
alert(person.name+" is "+person.age);


